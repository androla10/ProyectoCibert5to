-- MySQL Script generated by MySQL Workbench
-- 07/01/16 14:05:03
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema sgi
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema sgi
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `sgi` DEFAULT CHARACTER SET utf8 ;
USE `sgi` ;

-- -----------------------------------------------------
-- Table `sgi`.`estado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`estado` (
  `idEstado` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `sDescripcion` VARCHAR(45) NULL DEFAULT NULL COMMENT '',
  `iActivo` INT NULL DEFAULT NULL COMMENT '',
  PRIMARY KEY (`idEstado`)  COMMENT '')
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `sgi`.`tipoincidencia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`tipoincidencia` (
  `idTipoIncidencia` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `sDescripcion` VARCHAR(100) NULL DEFAULT NULL COMMENT '',
  `iActivo` INT NULL DEFAULT NULL COMMENT '',
  PRIMARY KEY (`idTipoIncidencia`)  COMMENT '')
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `sgi`.`genero`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`genero` (
  `idGenero` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `sDescripcion` VARCHAR(45) NULL DEFAULT NULL COMMENT '',
  PRIMARY KEY (`idGenero`)  COMMENT '')
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `sgi`.`persona`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`persona` (
  `idPersona` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `sNombre` VARCHAR(100) NULL DEFAULT NULL COMMENT '',
  `sApellido` VARCHAR(200) NULL DEFAULT NULL COMMENT '',
  `sDni` VARCHAR(8) NULL DEFAULT NULL COMMENT '',
  `sCorreo` VARCHAR(150) NULL DEFAULT NULL COMMENT '',
  `sTelefono` VARCHAR(7) NULL DEFAULT NULL COMMENT '',
  `sAnexo` VARCHAR(15) NULL DEFAULT NULL COMMENT '',
  `sCelular` VARCHAR(9) NULL DEFAULT NULL COMMENT '',
  `idGenero` INT NOT NULL COMMENT '',
  PRIMARY KEY (`idPersona`)  COMMENT '',
  INDEX `fk_Persona_Genero_idx` (`idGenero` ASC)  COMMENT '',
  CONSTRAINT `fk_Persona_Genero`
    FOREIGN KEY (`idGenero`)
    REFERENCES `sgi`.`genero` (`idGenero`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `sgi`.`tipousuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`tipousuario` (
  `idTipoUsuario` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `sDescripcion` VARCHAR(45) NULL DEFAULT NULL COMMENT '',
  `iActivo` INT NULL DEFAULT NULL COMMENT '',
  PRIMARY KEY (`idTipoUsuario`)  COMMENT '')
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `sgi`.`usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`usuario` (
  `idUsuario` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `sMatricula` VARCHAR(100) NULL DEFAULT NULL COMMENT '',
  `sUsuario` VARCHAR(100) NULL DEFAULT NULL COMMENT '',
  `sClave` VARCHAR(100) NULL DEFAULT NULL COMMENT '',
  `iActivo` INT NULL DEFAULT NULL COMMENT '',
  `idPersona` INT NOT NULL COMMENT '',
  `idTipoUsuario` INT NOT NULL COMMENT '',
  `dFechaRegistro` DATETIME NULL COMMENT '',
  PRIMARY KEY (`idUsuario`)  COMMENT '',
  INDEX `fk_Usuario_Persona1_idx` (`idPersona` ASC)  COMMENT '',
  INDEX `fk_Usuario_TipoUsuario1_idx` (`idTipoUsuario` ASC)  COMMENT '',
  CONSTRAINT `fk_Usuario_Persona1`
    FOREIGN KEY (`idPersona`)
    REFERENCES `sgi`.`persona` (`idPersona`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Usuario_TipoUsuario1`
    FOREIGN KEY (`idTipoUsuario`)
    REFERENCES `sgi`.`tipousuario` (`idTipoUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `sgi`.`Urgencia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`Urgencia` (
  `idUrgencia` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `sDescripcion` VARCHAR(100) NULL COMMENT '',
  PRIMARY KEY (`idUrgencia`)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sgi`.`Prioridad`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`Prioridad` (
  `idPrioridad` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `sDescripcion` VARCHAR(100) NULL COMMENT '',
  PRIMARY KEY (`idPrioridad`)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sgi`.`incidencia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`incidencia` (
  `idIncidencia` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `sTitulo` VARCHAR(200) NULL COMMENT '',
  `sResumen` VARCHAR(1000) NULL COMMENT '',
  `dFechaCreacion` DATETIME NULL DEFAULT NULL COMMENT '',
  `dFechaTermino` DATETIME NULL DEFAULT NULL COMMENT '',
  `sDescripcion` VARCHAR(500) NULL DEFAULT NULL COMMENT '',
  `idUsuario` INT NOT NULL COMMENT '',
  `idTipoIncidencia` INT NOT NULL COMMENT '',
  `idEstado` INT NOT NULL COMMENT '',
  `iEvaluacion` INT NULL COMMENT '',
  `idUrgencia` INT NOT NULL COMMENT '',
  `idPrioridad` INT NOT NULL COMMENT '',
  PRIMARY KEY (`idIncidencia`)  COMMENT '',
  INDEX `fk_Incidencia_Usuario1_idx` (`idUsuario` ASC)  COMMENT '',
  INDEX `fk_Incidencia_Estado1_idx` (`idEstado` ASC)  COMMENT '',
  INDEX `fk_Incidencia_TipoIncidencia1_idx` (`idTipoIncidencia` ASC)  COMMENT '',
  INDEX `fk_incidencia_Urgencia1_idx` (`idUrgencia` ASC)  COMMENT '',
  INDEX `fk_incidencia_Prioridad1_idx` (`idPrioridad` ASC)  COMMENT '',
  CONSTRAINT `fk_Incidencia_Estado1`
    FOREIGN KEY (`idEstado`)
    REFERENCES `sgi`.`estado` (`idEstado`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Incidencia_TipoIncidencia1`
    FOREIGN KEY (`idTipoIncidencia`)
    REFERENCES `sgi`.`tipoincidencia` (`idTipoIncidencia`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Incidencia_Usuario1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `sgi`.`usuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_incidencia_Urgencia1`
    FOREIGN KEY (`idUrgencia`)
    REFERENCES `sgi`.`Urgencia` (`idUrgencia`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_incidencia_Prioridad1`
    FOREIGN KEY (`idPrioridad`)
    REFERENCES `sgi`.`Prioridad` (`idPrioridad`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `sgi`.`atencionincidencia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`atencionincidencia` (
  `idAtencionIncidencia` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `dFechaAsociacion` DATETIME NULL DEFAULT NULL COMMENT '',
  `iResultado` INT NULL DEFAULT NULL COMMENT '',
  `idIncidencia` INT NOT NULL COMMENT '',
  `idUsuario` INT NOT NULL COMMENT '',
  PRIMARY KEY (`idAtencionIncidencia`)  COMMENT '',
  INDEX `fk_AtencionIncidencia_Incidencia1_idx` (`idIncidencia` ASC)  COMMENT '',
  INDEX `fk_AtencionIncidencia_Usuario1_idx` (`idUsuario` ASC)  COMMENT '',
  CONSTRAINT `fk_AtencionIncidencia_Incidencia1`
    FOREIGN KEY (`idIncidencia`)
    REFERENCES `sgi`.`incidencia` (`idIncidencia`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_AtencionIncidencia_Usuario1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `sgi`.`usuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `sgi`.`geo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`geo` (
  `idGeo` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `sDescripcion` VARCHAR(1000) NULL DEFAULT NULL COMMENT '',
  `sNivel` VARCHAR(45) NULL DEFAULT NULL COMMENT '',
  `idPadre` INT NULL DEFAULT NULL COMMENT '',
  `sTipoGeo` VARCHAR(45) NULL DEFAULT NULL COMMENT '',
  PRIMARY KEY (`idGeo`)  COMMENT '',
  INDEX `fk_Geo_Geo1_idx` (`idPadre` ASC)  COMMENT '',
  CONSTRAINT `fk_Geo_Geo1`
    FOREIGN KEY (`idPadre`)
    REFERENCES `sgi`.`geo` (`idGeo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 20
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `sgi`.`imagen`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`imagen` (
  `idImagen` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `imagen` BLOB NOT NULL COMMENT '',
  `idIncidencia` INT NOT NULL COMMENT '',
  PRIMARY KEY (`idImagen`)  COMMENT '',
  INDEX `fk_Imagen_Incidencia1_idx` (`idIncidencia` ASC)  COMMENT '',
  CONSTRAINT `fk_Imagen_Incidencia1`
    FOREIGN KEY (`idIncidencia`)
    REFERENCES `sgi`.`incidencia` (`idIncidencia`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `sgi`.`tipoResidencia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`tipoResidencia` (
  `idtipo` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `sDescripcion` VARCHAR(45) NULL COMMENT '',
  PRIMARY KEY (`idtipo`)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sgi`.`residencia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`residencia` (
  `idResidencia` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `sDescripcion` VARCHAR(45) NULL DEFAULT NULL COMMENT '',
  `idtipoResidencia` INT NOT NULL COMMENT '',
  PRIMARY KEY (`idResidencia`)  COMMENT '',
  INDEX `fk_residencia_tipoResidencia1_idx` (`idtipoResidencia` ASC)  COMMENT '',
  CONSTRAINT `fk_residencia_tipoResidencia1`
    FOREIGN KEY (`idtipoResidencia`)
    REFERENCES `sgi`.`tipoResidencia` (`idtipo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 2
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `sgi`.`residencia_geo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`residencia_geo` (
  `idResidencia_Geo` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `idResidencia` INT NOT NULL COMMENT '',
  `idGeo` INT NOT NULL COMMENT '',
  `idPadre` INT NULL COMMENT '',
  `iActivo` INT NULL COMMENT '',
  PRIMARY KEY (`idResidencia_Geo`)  COMMENT '',
  INDEX `fk_sede_geo_Sede1_idx` (`idResidencia` ASC)  COMMENT '',
  INDEX `fk_sede_geo_Geo1_idx` (`idGeo` ASC)  COMMENT '',
  INDEX `fk_residencia_geo_residencia_geo1_idx` (`idPadre` ASC)  COMMENT '',
  CONSTRAINT `fk_sede_geo_Geo1`
    FOREIGN KEY (`idGeo`)
    REFERENCES `sgi`.`geo` (`idGeo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_sede_geo_Sede1`
    FOREIGN KEY (`idResidencia`)
    REFERENCES `sgi`.`residencia` (`idResidencia`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_residencia_geo_residencia_geo1`
    FOREIGN KEY (`idPadre`)
    REFERENCES `sgi`.`residencia_geo` (`idResidencia_Geo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `sgi`.`TipoSeguimiento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`TipoSeguimiento` (
  `idTipoSeguimiento` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `sDescripcion` VARCHAR(200) NULL COMMENT '',
  `iActivo` INT NULL COMMENT '',
  PRIMARY KEY (`idTipoSeguimiento`)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sgi`.`seguimientoincidencia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`seguimientoincidencia` (
  `idSeguimientoIncidencia` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `sDescripcion` VARCHAR(1000) NULL COMMENT '',
  `dFecha` DATETIME NOT NULL COMMENT '',
  `idIncidencia` INT NOT NULL COMMENT '',
  `idEstado` INT NOT NULL COMMENT '',
  `idUsuario` INT NOT NULL COMMENT '',
  `idTipoSeguimiento` INT NOT NULL COMMENT '',
  PRIMARY KEY (`idSeguimientoIncidencia`)  COMMENT '',
  INDEX `fk_SeguimientoIncidencia_Incidencia1_idx` (`idIncidencia` ASC)  COMMENT '',
  INDEX `fk_SeguimientoIncidencia_Estado1_idx` (`idEstado` ASC)  COMMENT '',
  INDEX `fk_seguimientoincidencia_usuario1_idx` (`idUsuario` ASC)  COMMENT '',
  INDEX `fk_seguimientoincidencia_Comentario1_idx` (`idTipoSeguimiento` ASC)  COMMENT '',
  CONSTRAINT `fk_SeguimientoIncidencia_Estado1`
    FOREIGN KEY (`idEstado`)
    REFERENCES `sgi`.`estado` (`idEstado`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SeguimientoIncidencia_Incidencia1`
    FOREIGN KEY (`idIncidencia`)
    REFERENCES `sgi`.`incidencia` (`idIncidencia`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_seguimientoincidencia_usuario1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `sgi`.`usuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_seguimientoincidencia_Comentario1`
    FOREIGN KEY (`idTipoSeguimiento`)
    REFERENCES `sgi`.`TipoSeguimiento` (`idTipoSeguimiento`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `sgi`.`area`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`area` (
  `idArea` INT NOT NULL COMMENT '',
  `sDescripcion` VARCHAR(200) NULL COMMENT '',
  PRIMARY KEY (`idArea`)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sgi`.`residencia_area`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`residencia_area` (
  `idresidencia_area` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `idResidencia` INT NOT NULL COMMENT '',
  `idArea` INT NOT NULL COMMENT '',
  `iActivo` INT NULL COMMENT '',
  PRIMARY KEY (`idresidencia_area`)  COMMENT '',
  INDEX `fk_agencia_area_agencia1_idx` (`idResidencia` ASC)  COMMENT '',
  INDEX `fk_agencia_area_Area1_idx` (`idArea` ASC)  COMMENT '',
  CONSTRAINT `fk_agencia_area_agencia1`
    FOREIGN KEY (`idResidencia`)
    REFERENCES `sgi`.`residencia` (`idResidencia`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_agencia_area_Area1`
    FOREIGN KEY (`idArea`)
    REFERENCES `sgi`.`area` (`idArea`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sgi`.`usuario_area`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sgi`.`usuario_area` (
  `idusuario_area` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `idresidencia_area` INT NOT NULL COMMENT '',
  `idUsuario` INT NOT NULL COMMENT '',
  PRIMARY KEY (`idusuario_area`)  COMMENT '',
  INDEX `fk_usuario_area_residencia_area1_idx` (`idresidencia_area` ASC)  COMMENT '',
  INDEX `fk_usuario_area_usuario1_idx` (`idUsuario` ASC)  COMMENT '',
  CONSTRAINT `fk_usuario_area_residencia_area1`
    FOREIGN KEY (`idresidencia_area`)
    REFERENCES `sgi`.`residencia_area` (`idresidencia_area`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_usuario_area_usuario1`
    FOREIGN KEY (`idUsuario`)
    REFERENCES `sgi`.`usuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `sgi` ;

-- -----------------------------------------------------
-- procedure SGI_WEB_C_INCIDENCIA
-- -----------------------------------------------------

DELIMITER $$
USE `sgi`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SGI_WEB_C_INCIDENCIA`(in descripcion varchar(1000),in idTipoIncidencia int,in fotobinary Blob,in idUsuario int)
BEGIN
	DECLARE IDGENERADO INT;
    DECLARE IDOPERATIVO INT;
    
	START TRANSACTION;
	
    /*Creando Cabecera de Incidencia*/
    INSERT Incidencia (dFechaCreacion,idUsuario,idTipoIncidencia,idEstado)
	VALUES(now(),idUsuario,idTipoIncidencia,1);
    
    SET IDGENERADO = @@IDENTITY;
    
    /*Ingresando el Seguimiento de la Incidencia*/
    INSERT SeguimientoIncidencia(dFecha,idIncidencia,idEstado)
    VALUES(now(),IDGENERADO,1);
    
    /*Agregando Imagen a la Incidencia*/
    IF fotobinary <> "" OR fotobinary is not null  THEN
    
		INSERT imagen (imagen,idIncidencia)
		VALUES(descripcion,IDGENERADO);		
        
    END IF;
    
    SET IDOPERATIVO =  `sgi`.`SGI_WEB_OBTENEREMPLEADOLIBRE`();
    
    
    INSERT AtencionIncidencia (dFechaAsociacion, iResultado, idIncidencia, idUsuario)
    VALUES (now(),1,IDGENERADO,IDOPERATIVO);
    
    IF ROW_COUNT() > 0
    THEN
		COMMIT;
        SELECT IDGENERADO;
    ELSE
		ROLLBACK;
        SELECT -1;
    END IF;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SGI_WEB_C_REGISTRARUSUARIO
-- -----------------------------------------------------

DELIMITER $$
USE `sgi`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SGI_WEB_C_REGISTRARUSUARIO`(
IN NOMBRE VARCHAR(200),
IN APELLIDO VARCHAR(200),
IN MATRICULA VARCHAR(50),
IN DNI VARCHAR(8),
IN GENERO INT,
IN TIPOUSUARIO INT,
IN TELEFONO VARCHAR(7),
IN CELULAR VARCHAR(9),
IN CORREO VARCHAR(200)
)
BEGIN
	DECLARE USUARIO VARCHAR(120);
    DECLARE IDPERSONA INT;
    
	START TRANSACTION;
    
    IF NOT EXISTS(SELECT 1 FROM PERSONA PP INNER JOIN USUARIO US ON US.idPersona = PP.idPersona WHERE PP.sDni = DNI AND US.iActivo = 1)
    THEN
    
		INSERT PERSONA(sNombre, sApellido, sDni, sCorreo, sTelefono, sCelular, idGenero)
		VALUES(NOMBRE,APELLIDO,DNI,CORREO,TELEFONO,CELULAR,GENERO);
        
        SET IDPERSONA = @@IDENTITY;
        
        /*Funcion para determinar cual es nombre del usuario*/
        SET USUARIO = SGI_WEB_FUC_CALCULARNOMBRE(NOMBRE,APELLIDO);
	
		INSERT usuario (sMatricula, sUsuario, sClave, iActivo, idPersona, idTipoUsuario,dFechaRegistro)
		VALUES(MATRICULA,USUARIO,DNI,1,IDPERSONA,TIPOUSUARIO,now());
        
        IF ROW_COUNT() > 0
        THEN
			COMMIT;
            SELECT IDPERSONA;
        ELSE
			ROLLBACK;
            SELECT -1;
        END IF;
    ELSE
		ROLLBACK;
        SELECT -2;
    END IF;    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function SGI_WEB_FUC_CALCULARNOMBRE
-- -----------------------------------------------------

DELIMITER $$
USE `sgi`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `SGI_WEB_FUC_CALCULARNOMBRE`(
NOMBRE VARCHAR(200),
APELLIDO VARCHAR(200)
) RETURNS varchar(100) CHARSET utf8
BEGIN
        DECLARE USUARIOCOMPLETO VARCHAR(100);
        DECLARE ENCONTRO BOOLEAN DEFAULT TRUE;
        DECLARE NUMERO INT DEFAULT 0;
        DECLARE VAL CHAR(10) DEFAULT '';
        DECLARE RESULTADO VARCHAR(100) DEFAULT '';
        
        WHILE ENCONTRO DO
			
            
			SET USUARIOCOMPLETO = CONCAT(LEFT(NOMBRE,1),VAL,SPLIT_STR(APELLIDO,' ',1));
			IF EXISTS( SELECT 1 FROM USUARIO WHERE SUSUARIO = USUARIOCOMPLETO)
            THEN
				SET NUMERO = NUMERO +1;
                SET VAL = CAST(NUMERO AS CHAR);
            ELSE
				SET ENCONTRO = FALSE;
            END IF;
        END WHILE;
        
        RETURN USUARIOCOMPLETO;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function SGI_WEB_OBTENEREMPLEADOLIBRE
-- -----------------------------------------------------

DELIMITER $$
USE `sgi`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `SGI_WEB_OBTENEREMPLEADOLIBRE`() RETURNS int(11)
BEGIN
	DECLARE IDOPERATIVO INT;
    
    SET IDOPERATIVO = 0;
    
	SET IDOPERATIVO = (
						SELECT T.idUsuario 
						FROM 
						(
								(
									SELECT 0 incidenciasAsignada ,
											us.idUsuario 
									FROM atencionincidencia ati RIGHT JOIN usuario us
									ON ati.idUsuario = us.idUsuario
									WHERE us.idTipoUsuario = 3 AND ati.idAtencionIncidencia IS NULL
								)
							UNION
								(	
									SELECT count(*) incidenciasAsignada,
											us.idUsuario 
									FROM atencionincidencia ati RIGHT JOIN usuario us
									on us.idUsuario = ati.idUsuario
									WHERE us.idTipoUsuario = 3 AND ati.idAtencionIncidencia IS NOT NULL AND ati.iResultado = 1
									GROUP BY us.idUsuario
								)
							ORDER BY incidenciasAsignada ASC,idUsuario ASC
						) as T
						limit 1
					);
        
RETURN IDOPERATIVO;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SGI_WEB_R_LISTARGENERO
-- -----------------------------------------------------

DELIMITER $$
USE `sgi`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SGI_WEB_R_LISTARGENERO`()
BEGIN
	SELECT 
		idGenero iGenero,
        sDescripcion
	FROM GENERO;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SGI_WEB_R_LISTARTIPOUSUARIO
-- -----------------------------------------------------

DELIMITER $$
USE `sgi`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SGI_WEB_R_LISTARTIPOUSUARIO`()
BEGIN
	SELECT 
			idTipoUsuario iTipo,
			sDescripcion sDescripcion
    FROM TipoUsuario
    WHERE iActivo = 1 and idTipoUsuario <> 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SGI_WEB_R_LISTARUSUARIO
-- -----------------------------------------------------

DELIMITER $$
USE `sgi`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SGI_WEB_R_LISTARUSUARIO`()
BEGIN
	SELECT 
		us.idUsuario,
		us.sUsuario,
		us.sClave,
		us.sMatricula,
		IFNULL(per.sTelefono,'') as sTelefono,
		IFNULL(per.sCelular,'') as sCelular,
		IFNULL(per.sCorreo,'') as sCorreo,
		us.idTipoUsuario,
		tu.sDescripcion as tipoUsuario,
		us.idPersona,
		us.iActivo,
		case us.iActivo
		when 1 then 'Activo'
		else 'Inactivo' end as activo,
		per.sNombre,
		per.sApellido

	FROM usuario us inner join tipousuario tu
	on us.idTipoUsuario = tu.idTipoUsuario inner join persona per
	on per.idPersona = us.idPersona;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SGI_WEB_R_VALIDARUSUARIO
-- -----------------------------------------------------

DELIMITER $$
USE `sgi`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SGI_WEB_R_VALIDARUSUARIO`(IN usu VARCHAR(50),IN clave VARCHAR(50))
BEGIN
	SELECT * FROM usuario where sUsuario = usu and  sClave = clave;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function SPLIT_STR
-- -----------------------------------------------------

DELIMITER $$
USE `sgi`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `SPLIT_STR`(
  x VARCHAR(255),
  delim VARCHAR(12),
  pos INT
) RETURNS varchar(255) CHARSET utf8
RETURN REPLACE(SUBSTRING(SUBSTRING_INDEX(x, delim, pos),
       LENGTH(SUBSTRING_INDEX(x, delim, pos -1)) + 1),
       delim, '')$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SGI_WEB_C_REGISTRARSEDE
-- -----------------------------------------------------

DELIMITER $$
USE `sgi`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SGI_WEB_C_REGISTRARSEDE`(in idPadre INTEGER,in sDescripcion VARCHAR(150),in direccion VARCHAR(500))
BEGIN
	DECLARE IDSEDEGENERADO INT DEFAULT -1;
	DECLARE IDGEOGENERADO INT DEFAULT -1;
	START TRANSACTION;
    
    INSERT SEDE (sDescripcion) VALUES(sDescripcion);
    
    SET IDSEDEGENERADO = @@IDENTITY;
    
    
    INSERT GEO (sDescripcion,sNivel,idPadre,sTipoGeo)
    VALUES (direccion,'DIRE',idPadre,'SEDE');
    
    INSERT SEDE_GEO (idSede,idGeo,iActivo)
    VALUES (IDSEDEGENERADO,IDGEOGENERADO,1);
    
    IF ROW_COUNT() > 0
    THEN
		COMMIT;
        SELECT @@IDENTITY;
    ELSE
		ROLLBACK;
        SELECT -1;
    END IF;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SGI_WEB_R_LISTARDEPARTAMENTOS
-- -----------------------------------------------------

DELIMITER $$
USE `sgi`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SGI_WEB_R_LISTARDEPARTAMENTOS`(IN IDPROV INTEGER)
BEGIN
	SELECT idGeo,sDescripcion FROM geo WHERE sNIVEL = 'DEPA' AND idPadre = IDPROV;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `sgi`.`estado`
-- -----------------------------------------------------
START TRANSACTION;
USE `sgi`;
INSERT INTO `sgi`.`estado` (`idEstado`, `sDescripcion`, `iActivo`) VALUES (1, 'Creado', 1);
INSERT INTO `sgi`.`estado` (`idEstado`, `sDescripcion`, `iActivo`) VALUES (2, 'Observado', 1);
INSERT INTO `sgi`.`estado` (`idEstado`, `sDescripcion`, `iActivo`) VALUES (3, 'En proceso', 1);
INSERT INTO `sgi`.`estado` (`idEstado`, `sDescripcion`, `iActivo`) VALUES (4, 'Finalizado', 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `sgi`.`tipoincidencia`
-- -----------------------------------------------------
START TRANSACTION;
USE `sgi`;
INSERT INTO `sgi`.`tipoincidencia` (`idTipoIncidencia`, `sDescripcion`, `iActivo`) VALUES (1, 'Hardware', 1);
INSERT INTO `sgi`.`tipoincidencia` (`idTipoIncidencia`, `sDescripcion`, `iActivo`) VALUES (2, 'Software', 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `sgi`.`genero`
-- -----------------------------------------------------
START TRANSACTION;
USE `sgi`;
INSERT INTO `sgi`.`genero` (`idGenero`, `sDescripcion`) VALUES (1, 'Masculino');
INSERT INTO `sgi`.`genero` (`idGenero`, `sDescripcion`) VALUES (2, 'Femenino');

COMMIT;


-- -----------------------------------------------------
-- Data for table `sgi`.`persona`
-- -----------------------------------------------------
START TRANSACTION;
USE `sgi`;
INSERT INTO `sgi`.`persona` (`idPersona`, `sNombre`, `sApellido`, `sDni`, `sCorreo`, `sTelefono`, `sAnexo`, `sCelular`, `idGenero`) VALUES (1, 'ZELER BENJI', 'VILLARREAL MARCELO', '70825136', 'villarreal.benji@gmail.com', '3887920', NULL, '935510119', 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `sgi`.`tipousuario`
-- -----------------------------------------------------
START TRANSACTION;
USE `sgi`;
INSERT INTO `sgi`.`tipousuario` (`idTipoUsuario`, `sDescripcion`, `iActivo`) VALUES (1, 'Administrador', 1);
INSERT INTO `sgi`.`tipousuario` (`idTipoUsuario`, `sDescripcion`, `iActivo`) VALUES (2, 'Usuario', 1);
INSERT INTO `sgi`.`tipousuario` (`idTipoUsuario`, `sDescripcion`, `iActivo`) VALUES (3, 'Operativo', 1);
INSERT INTO `sgi`.`tipousuario` (`idTipoUsuario`, `sDescripcion`, `iActivo`) VALUES (4, 'Supervisor', 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `sgi`.`usuario`
-- -----------------------------------------------------
START TRANSACTION;
USE `sgi`;
INSERT INTO `sgi`.`usuario` (`idUsuario`, `sMatricula`, `sUsuario`, `sClave`, `iActivo`, `idPersona`, `idTipoUsuario`, `dFechaRegistro`) VALUES (1, 's53202', 'bvillarreal', '123', 1, 1, 1, '2016-06-10 13:51:00');

COMMIT;


-- -----------------------------------------------------
-- Data for table `sgi`.`Urgencia`
-- -----------------------------------------------------
START TRANSACTION;
USE `sgi`;
INSERT INTO `sgi`.`Urgencia` (`idUrgencia`, `sDescripcion`) VALUES (1, 'Alta');
INSERT INTO `sgi`.`Urgencia` (`idUrgencia`, `sDescripcion`) VALUES (2, 'Media');
INSERT INTO `sgi`.`Urgencia` (`idUrgencia`, `sDescripcion`) VALUES (3, 'Baja');

COMMIT;


-- -----------------------------------------------------
-- Data for table `sgi`.`Prioridad`
-- -----------------------------------------------------
START TRANSACTION;
USE `sgi`;
INSERT INTO `sgi`.`Prioridad` (`idPrioridad`, `sDescripcion`) VALUES (1, 'Alta');
INSERT INTO `sgi`.`Prioridad` (`idPrioridad`, `sDescripcion`) VALUES (2, 'Media');
INSERT INTO `sgi`.`Prioridad` (`idPrioridad`, `sDescripcion`) VALUES (3, 'Baja');

COMMIT;


-- -----------------------------------------------------
-- Data for table `sgi`.`geo`
-- -----------------------------------------------------
START TRANSACTION;
USE `sgi`;
INSERT INTO `sgi`.`geo` (`idGeo`, `sDescripcion`, `sNivel`, `idPadre`, `sTipoGeo`) VALUES (1, 'Peru', 'PAIS', NULL, 'ALL');
INSERT INTO `sgi`.`geo` (`idGeo`, `sDescripcion`, `sNivel`, `idPadre`, `sTipoGeo`) VALUES (2, 'Lima', 'PROV', 1, 'ALL');
INSERT INTO `sgi`.`geo` (`idGeo`, `sDescripcion`, `sNivel`, `idPadre`, `sTipoGeo`) VALUES (3, 'Huaura', 'PROV', 1, 'ALL');
INSERT INTO `sgi`.`geo` (`idGeo`, `sDescripcion`, `sNivel`, `idPadre`, `sTipoGeo`) VALUES (4, 'Lima', 'DEPA', 2, 'ALL');
INSERT INTO `sgi`.`geo` (`idGeo`, `sDescripcion`, `sNivel`, `idPadre`, `sTipoGeo`) VALUES (5, 'Huacho', 'DEPA', 3, 'ALL');
INSERT INTO `sgi`.`geo` (`idGeo`, `sDescripcion`, `sNivel`, `idPadre`, `sTipoGeo`) VALUES (6, 'Cercado de Lima', 'DIST', 4, 'ALL');
INSERT INTO `sgi`.`geo` (`idGeo`, `sDescripcion`, `sNivel`, `idPadre`, `sTipoGeo`) VALUES (7, 'Ate', 'DIST', 4, 'ALL');
INSERT INTO `sgi`.`geo` (`idGeo`, `sDescripcion`, `sNivel`, `idPadre`, `sTipoGeo`) VALUES (8, 'Barranco', 'DIST', 4, 'ALL');
INSERT INTO `sgi`.`geo` (`idGeo`, `sDescripcion`, `sNivel`, `idPadre`, `sTipoGeo`) VALUES (9, 'Miraflores', 'DIST', 4, 'ALL');
INSERT INTO `sgi`.`geo` (`idGeo`, `sDescripcion`, `sNivel`, `idPadre`, `sTipoGeo`) VALUES (10, 'Santa Maria', 'DIST', 5, 'ALL');
INSERT INTO `sgi`.`geo` (`idGeo`, `sDescripcion`, `sNivel`, `idPadre`, `sTipoGeo`) VALUES (11, 'Huaura', 'DIST', 5, 'ALL');
INSERT INTO `sgi`.`geo` (`idGeo`, `sDescripcion`, `sNivel`, `idPadre`, `sTipoGeo`) VALUES (12, 'Hualmay', 'DIST', 5, 'ALL');
INSERT INTO `sgi`.`geo` (`idGeo`, `sDescripcion`, `sNivel`, `idPadre`, `sTipoGeo`) VALUES (13, 'Carquin', 'DIST', 5, 'ALL');
INSERT INTO `sgi`.`geo` (`idGeo`, `sDescripcion`, `sNivel`, `idPadre`, `sTipoGeo`) VALUES (14, 'Lima', 'DIST', 4, 'ALL');
INSERT INTO `sgi`.`geo` (`idGeo`, `sDescripcion`, `sNivel`, `idPadre`, `sTipoGeo`) VALUES (15, 'Jr Junin 4587', 'DIRE', 14, 'ALL');
INSERT INTO `sgi`.`geo` (`idGeo`, `sDescripcion`, `sNivel`, `idPadre`, `sTipoGeo`) VALUES (16, 'Av. 28 de julio 4210', 'DIRE', 14, 'ALL');

COMMIT;


-- -----------------------------------------------------
-- Data for table `sgi`.`tipoResidencia`
-- -----------------------------------------------------
START TRANSACTION;
USE `sgi`;
INSERT INTO `sgi`.`tipoResidencia` (`idtipo`, `sDescripcion`) VALUES (1, 'Agencia Provincia');
INSERT INTO `sgi`.`tipoResidencia` (`idtipo`, `sDescripcion`) VALUES (2, 'Agencia Lima');
INSERT INTO `sgi`.`tipoResidencia` (`idtipo`, `sDescripcion`) VALUES (3, 'Sucursal');

COMMIT;


-- -----------------------------------------------------
-- Data for table `sgi`.`residencia`
-- -----------------------------------------------------
START TRANSACTION;
USE `sgi`;
INSERT INTO `sgi`.`residencia` (`idResidencia`, `sDescripcion`, `idtipoResidencia`) VALUES (1, '28 de Julio', 2);
INSERT INTO `sgi`.`residencia` (`idResidencia`, `sDescripcion`, `idtipoResidencia`) VALUES (2, 'Sucursal central de Lima', 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `sgi`.`residencia_geo`
-- -----------------------------------------------------
START TRANSACTION;
USE `sgi`;
INSERT INTO `sgi`.`residencia_geo` (`idResidencia_Geo`, `idResidencia`, `idGeo`, `idPadre`, `iActivo`) VALUES (1, 2, 15, NULL, 1);
INSERT INTO `sgi`.`residencia_geo` (`idResidencia_Geo`, `idResidencia`, `idGeo`, `idPadre`, `iActivo`) VALUES (2, 1, 16, 1, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `sgi`.`TipoSeguimiento`
-- -----------------------------------------------------
START TRANSACTION;
USE `sgi`;
INSERT INTO `sgi`.`TipoSeguimiento` (`idTipoSeguimiento`, `sDescripcion`, `iActivo`) VALUES (1, 'Sistema', 1);
INSERT INTO `sgi`.`TipoSeguimiento` (`idTipoSeguimiento`, `sDescripcion`, `iActivo`) VALUES (2, 'Comentario', 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `sgi`.`area`
-- -----------------------------------------------------
START TRANSACTION;
USE `sgi`;
INSERT INTO `sgi`.`area` (`idArea`, `sDescripcion`) VALUES (1, 'Tecnologia');
INSERT INTO `sgi`.`area` (`idArea`, `sDescripcion`) VALUES (2, 'Operación');
INSERT INTO `sgi`.`area` (`idArea`, `sDescripcion`) VALUES (3, 'Riesgo');
INSERT INTO `sgi`.`area` (`idArea`, `sDescripcion`) VALUES (4, 'Caja');
INSERT INTO `sgi`.`area` (`idArea`, `sDescripcion`) VALUES (5, 'HelpDesk');

COMMIT;


-- -----------------------------------------------------
-- Data for table `sgi`.`residencia_area`
-- -----------------------------------------------------
START TRANSACTION;
USE `sgi`;
INSERT INTO `sgi`.`residencia_area` (`idresidencia_area`, `idResidencia`, `idArea`, `iActivo`) VALUES (1, 2, 1, 1);
INSERT INTO `sgi`.`residencia_area` (`idresidencia_area`, `idResidencia`, `idArea`, `iActivo`) VALUES (2, 1, 2, 1);
INSERT INTO `sgi`.`residencia_area` (`idresidencia_area`, `idResidencia`, `idArea`, `iActivo`) VALUES (3, 1, 3, 1);
INSERT INTO `sgi`.`residencia_area` (`idresidencia_area`, `idResidencia`, `idArea`, `iActivo`) VALUES (4, 2, 5, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `sgi`.`usuario_area`
-- -----------------------------------------------------
START TRANSACTION;
USE `sgi`;
INSERT INTO `sgi`.`usuario_area` (`idusuario_area`, `idresidencia_area`, `idUsuario`) VALUES (1, 4, 1);

COMMIT;

